code: https://p.ip.fi/Tyt0

//Tree Construct
//Display Tree (Pre Order)
//Sum of tree data
//max of tree data
//height of tree
//size of tree (edge)

import java.util.*;

public class Main
{
    
	public static void main(String[] args) {
	Integer arr[]={50,25,12,null,null,37,30,null,null,null,75,62,null,70,null,null,89,null,null};
	Node root=new Node(arr[0],null,null);
	Pair rtp=new Pair(root,1);
	Stack<Pair> st=new Stack<Pair>();
	st.push(rtp);
	int idx=0;
	while(st.size()>0)
	{
	    Pair top=st.peek();
	    if(top.state==1)
	    {
	        idx++;
	        if(arr[idx]!=null)
	        {
	            top.node.left=new Node(arr[idx],null,null);
	            Pair lp=new Pair(top.node.left,1);
	            st.push(lp);
	        }else{
	            top.node.left=null;
	        }
	        top.state++;
	        
	    }else if(top.state==2){
	         idx++;
	        if(arr[idx]!=null)
	        {
	            top.node.right=new Node(arr[idx],null,null);
	            Pair rp=new Pair(top.node.right,1);
	            st.push(rp);
	        }else{
	            top.node.right=null;
	        }
	        top.state++;
	        
	    }else{
	        st.pop();
	    }
	}
    TreeOperation tree=new TreeOperation();
    System.out.println("*************************Tree's Data here******************************************");
	tree.display(root);
	System.out.println("Size of tree is"+tree.size(root));
	System.out.println("sum of tree's Data is"+tree.sum(root));
	System.out.println("max of tree's Data is"+tree.max(root));
	System.out.println("Height of tree is"+tree.height(root));
	}
	
	
}
class Node{
    Node left;
    Node right;
    int data;
    
    Node(int data,Node left,Node right){
        this.data=data;
        this.left=left;
        this.right=right;
    }
}

class Pair{
    Node node;
    int state;
    
    Pair(Node node,int state)
    {
        this.node=node;
        this.state=state;
    }
}

class TreeOperation{
    public   void display(Node node)
	{
	    if(node==null)
	    {
	        return ;
	    }
	    String  str="";
	    str+= node.left==null?".":node.left.data+" ";
	    str+="<-"+node.data+"->";
	    str+=node.right==null?".":node.right.data+"";
	    System.out.println(str);
	    
	    display(node.left);
	    display(node.right);
	    
	}
	
	public int size(Node node)
	{
	    if(node==null)
	    return 0;
	    
	    int leftSize=size(node.left);
	    int rightSize=size(node.right);
	    int totalSize=leftSize+rightSize+1;
	    return totalSize;
	    
	}
	
	public int sum(Node node)
	{
	    if(node==null)
	    {
	        return 0;
	    }
	    
	    int leftSum=sum(node.left);
	    int rightSum=sum(node.right);
	    int totalSum=leftSum+rightSum+node.data;
	    return totalSum;
	}
	
	public int max(Node node)
	{
	    if(node==null)
	    {
	        return Integer.MIN_VALUE;
	    }
	    
	    int leftMax=max(node.left);
	    int rightMax=max(node.right);
	    int finalMax=Math.max(node.data,Math.max(leftMax,rightMax));
	    return finalMax;
	}
	
	public int height(Node node)
	{
	    if(node==null)
	    {
	        return -1;
	    }
	    int leftHeight=height(node.left);
	    int rightHeight=height(node.right);
	    int treeHeight= Math.max(leftHeight,rightHeight)+1;
	    return treeHeight;
	}
     
}
